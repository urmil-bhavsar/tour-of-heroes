{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InMemoryDataService {\n  createDb() {\n    const heroes = [{\n      id: 12,\n      name: 'Dr. Nice'\n    }, {\n      id: 13,\n      name: 'Bombasto'\n    }, {\n      id: 14,\n      name: 'Celeritas'\n    }, {\n      id: 15,\n      name: 'Magneta'\n    }, {\n      id: 16,\n      name: 'RubberMan'\n    }, {\n      id: 17,\n      name: 'Dynama'\n    }, {\n      id: 18,\n      name: 'Dr. IQ'\n    }, {\n      id: 19,\n      name: 'Magma'\n    }, {\n      id: 20,\n      name: 'Tornado'\n    }];\n    return {\n      heroes\n    };\n  }\n  // if heroes array is emtpy, it will return initial number else it will return the highest\n  genId(heroes) {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n  constructor() {}\n  static #_ = this.ɵfac = function InMemoryDataService_Factory(t) {\n    return new (t || InMemoryDataService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InMemoryDataService,\n    factory: InMemoryDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["InMemoryDataService","createDb","heroes","id","name","genId","length","Math","max","map","hero","constructor","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\CODING\\Angular\\tour-of-heroes\\src\\app\\services\\in-memory-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from '../interfaces/hero';\n@Injectable({\n  providedIn: 'root'\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes}\n  }\n\n  // if heroes array is emtpy, it will return initial number else it will return the highest\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero=> hero.id)) + 1 : 11;\n  }\n\n  constructor() { }\n}\n"],"mappings":";AAMA,OAAM,MAAOA,mBAAmB;EAC9BC,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,CACb;MAAEC,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAE,EAC5B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAE,EAC5B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAW,CAAE,EAC7B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAS,CAAE,EAC3B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAW,CAAE,EAC7B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAC1B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAC1B;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAO,CAAE,EACzB;MAAED,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAS,CAAE,CAC5B;IACD,OAAO;MAACF;IAAM,CAAC;EACjB;EAEA;EACAG,KAAKA,CAACH,MAAc;IAClB,OAAOA,MAAM,CAACI,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,MAAM,CAACO,GAAG,CAACC,IAAI,IAAGA,IAAI,CAACP,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE;EAC7E;EAEAQ,YAAA,GAAgB;EAAC,QAAAC,CAAA,G;qBArBNZ,mBAAmB;EAAA;EAAA,QAAAa,EAAA,G;WAAnBb,mBAAmB;IAAAc,OAAA,EAAnBd,mBAAmB,CAAAe,IAAA;IAAAC,UAAA,EAFlB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}