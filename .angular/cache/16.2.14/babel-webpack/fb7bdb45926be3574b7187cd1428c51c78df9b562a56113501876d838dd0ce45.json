{"ast":null,"code":"import { catchError, of, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  getHeroes() {\n    // of(HEROES) returns an Observable<Hero[]> that emits a single value, the array of mock heroes\n    // const heroes = of(HEROES);\n    // this.messageService.add('HeroService: fetched heroes');\n    // return heroes;\n    // both 'of' and 'http.get()' return an Observable<Hero[]>\n    // an observable can return more than one value over time. An observable from HttpClient always emits a single value and then completes, never to emit again\n    // here '<Hero[]>' is the type specifier\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  // put req takes three params: url, data to update, options\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  // the convention is to name it _ to indicate that this parameter is intentionally unused. This is a common practice to avoid linting errors or confusion about unused parameters.\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  // here <T> is the type parameter to return the safe value as the type that the application expects and it is used to handle erros of various types\n  //  result? means that it is an optional parameter, it represent the value to be returned as an 'Observable' in case of error, its default value is undefined\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  // tap() allows to perform sideeffects for each emitted value in an observable stream without modifying it\n  searchHeroes(term) {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching ${term}`) : this.log(`no heroes matching ${term}`), catchError(this.handleError('searchHeroes', []))));\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.heroesUrl = 'api/heroes';\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","of","tap","HttpHeaders","HeroService","getHeroes","http","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","updateHero","hero","put","httpOptions","addHero","post","newHero","deleteHero","delete","operation","result","error","console","message","searchHeroes","term","trim","x","length","messageService","add","constructor","headers","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\CODING\\Angular\\tour-of-heroes\\src\\app\\services\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HEROES } from '../mock-heroes';\nimport { Hero } from '../interfaces/hero';\nimport { Observable, catchError, of, tap } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class HeroService {\n  getHeroes(): Observable<Hero[]> {\n    // of(HEROES) returns an Observable<Hero[]> that emits a single value, the array of mock heroes\n    // const heroes = of(HEROES);\n    // this.messageService.add('HeroService: fetched heroes');\n    // return heroes;\n\n    // both 'of' and 'http.get()' return an Observable<Hero[]>\n    // an observable can return more than one value over time. An observable from HttpClient always emits a single value and then completes, never to emit again\n\n    // here '<Hero[]>' is the type specifier\n    return this.http.get<Hero[]>(this.heroesUrl).pipe(\n      tap(_=>this.log('fetched heroes')),\n      catchError(this.handleError<Hero[]>('getHeroes', []))\n    )\n  }\n\n\n  getHero(id: number): Observable<Hero> {\n\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_=>this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    )\n  }\n\n\n  // put req takes three params: url, data to update, options\n  updateHero(hero: Hero): Observable<any>{\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_=>this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    )\n  }\n\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero)=>this.log(`added hero w/id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    )\n  }\n\n\n  // the convention is to name it _ to indicate that this parameter is intentionally unused. This is a common practice to avoid linting errors or confusion about unused parameters.\n  deleteHero(id: number): Observable<Hero>{\n    const url = `${this.heroesUrl}/${id}`\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n      tap(_=>this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    )\n  }\n\n\n   // here <T> is the type parameter to return the safe value as the type that the application expects and it is used to handle erros of various types\n\n  //  result? means that it is an optional parameter, it represent the value to be returned as an 'Observable' in case of error, its default value is undefined\n   private handleError<T>(operation = 'operation', result?: T){\n    return (error: any): Observable<T> =>{\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`)\n      return of(result as T)\n      \n    }\n  }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n\n\n// tap() allows to perform sideeffects for each emitted value in an observable stream without modifying it\n  searchHeroes(term: string): Observable<Hero[]>{\n    if(!term.trim()){\n      return of([])\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ? \n        this.log(`found heroes matching ${term}`):\n        this.log(`no heroes matching ${term}`),\n        catchError(this.handleError<Hero[]>('searchHeroes',[]))\n      )\n    )\n  }\n\n  private log(message: string){\n    this.messageService.add(`HeroService: ${message}`)\n  }\n\n  private heroesUrl = 'api/heroes'\n\n  constructor(\n    private messageService: MessageService,\n    private http: HttpClient\n  ) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}